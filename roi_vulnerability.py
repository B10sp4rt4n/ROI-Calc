import matplotlib.pyplot as plt
import numpy as np
import streamlit as st

def calcular_y_graficar(inversion_inicial, años_cobertura, sueldo_mensual, num_pcs, nivel_automatizacion, num_actualizaciones_anuales, horas_por_actualizacion):
    # Cálculos iniciales
    costo_hora_hombre = sueldo_mensual / 160  # USD/hora

    # Esfuerzo ahorrado
    horas_ahorradas_por_pc_anuales = horas_por_actualizacion * num_actualizaciones_anuales * nivel_automatizacion
    ahorro_anual = horas_ahorradas_por_pc_anuales * num_pcs * costo_hora_hombre
    ahorro_mensual = ahorro_anual / 12

    # Beneficio neto y métricas clave
    beneficio_neto_anual = ahorro_anual
    payback_period = inversion_inicial / ahorro_mensual
    roi = (beneficio_neto_anual * años_cobertura / inversion_inicial) * 100

    # Datos para gráficas
    # Beneficio acumulado hasta el mes 48
    meses = range(1, 49)
    beneficio_acumulado = [ahorro_mensual * mes for mes in meses]

    # Inversión vs ROI
    niveles_inversion = np.linspace(10000, 50000, 100)  # Rango de inversión
    rois_inversion = [(beneficio_neto_anual * años_cobertura / inversion) * 100 for inversion in niveles_inversion]

    # Generar gráficas
    st.subheader("Beneficio Acumulado y Payback Period")
    fig1, ax1 = plt.subplots(figsize=(7, 5))
    ax1.plot(meses, beneficio_acumulado, label="Beneficio Acumulado (USD)", linewidth=2)
    ax1.axhline(inversion_inicial, color='red', linestyle='--', label=f"Inversión Inicial (${inversion_inicial})")
    if payback_period <= 48:
        ax1.axvline(payback_period, color='green', linestyle='--', label=f"Payback Period ({payback_period:.1f} meses)")
    ax1.set_title("Beneficio Acumulado y Payback Period", fontsize=14)
    ax1.set_xlabel("Meses", fontsize=12)
    ax1.set_ylabel("Beneficio Acumulado (USD)", fontsize=12)
    ax1.grid(True, linestyle='--', alpha=0.6)
    ax1.legend(fontsize=10)
    st.pyplot(fig1)

    st.subheader("Inversión vs ROI")
    fig2, ax2 = plt.subplots(figsize=(7, 5))
    ax2.plot(niveles_inversion, rois_inversion, label="Inversión vs ROI", linewidth=2)
    ax2.axvline(inversion_inicial, color='green', linestyle='--', label=f"Inversión del Ejercicio (${inversion_inicial})")
    ax2.scatter([inversion_inicial], [roi], color='red', zorder=5, label=f"ROI del Ejercicio ({roi:.1f}%)")
    ax2.set_title("Inversión vs ROI", fontsize=14)
    ax2.set_xlabel("Nivel de Inversión (USD)", fontsize=12)
    ax2.set_ylabel("ROI (%)", fontsize=12)
    ax2.grid(True, linestyle='--', alpha=0.6)
    ax2.legend(fontsize=10)
    st.pyplot(fig2)

    # Resultados principales
    st.subheader("Resultados del Cálculo")
    st.metric(label="Costo por Hora-Hombre (USD)", value=f"${costo_hora_hombre:.2f}")
    st.metric(label="Esfuerzo Ahorrado por PC Anual (horas)", value=f"{horas_ahorradas_por_pc_anuales:.2f} horas")
    st.metric(label="Ahorro Mensual Total (USD)", value=f"${ahorro_mensual:.2f}")
    st.metric(label="Beneficio Neto Anual (USD)", value=f"${beneficio_neto_anual:.2f}")
    st.metric(label="Payback Period (meses)", value=f"{payback_period:.1f} meses")
    st.metric(label="ROI (%)", value=f"{roi:.2f}%")

# Interfaz de usuario con Streamlit
st.title("Calculadora de ROI y Payback Period")

# Inputs del usuario
inversion_inicial = st.number_input("Nivel de Inversión Inicial (USD):", min_value=1000, value=23000, step=1000)
años_cobertura = st.number_input("Años de Cobertura de Licenciamiento:", min_value=1, value=2, step=1)
sueldo_mensual = st.number_input("Sueldo Mensual del Ingeniero (USD):", min_value=500, value=1200, step=100)
num_pcs = st.number_input("Número de PCs:", min_value=1, value=220, step=10)
nivel_automatizacion = st.slider("Nivel de Automatización (%):", min_value=0, max_value=100, value=70, step=5) / 100
num_actualizaciones_anuales = st.slider("Número de Actualizaciones Anuales:", min_value=1, max_value=12, value=12, step=1)
horas_por_actualizacion = st.number_input("Horas Promedio por Actualización por PC:", min_value=0.1, value=1.0, step=0.1)

# Calcular y graficar
if st.button("Calcular"):
    calcular_y_graficar(inversion_inicial, años_cobertura, sueldo_mensual, num_pcs, nivel_automatizacion, num_actualizaciones_anuales, horas_por_actualizacion)
