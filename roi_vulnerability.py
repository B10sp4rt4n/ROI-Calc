import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

# Configuración de la página en Streamlit
st.set_page_config(page_title="Calculadora ROI & Payback", layout="wide")

def calcular_roi_payback():
    # Entradas del usuario
    st.header("Entradas del Cálculo")
    inversion_inicial = st.number_input("Nivel de inversión inicial (USD):", min_value=0.0, value=23000.0, step=1000.0)
    años_cobertura = st.number_input("Años de cobertura de licenciamiento:", min_value=1, max_value=10, value=2, step=1)
    sueldo_mensual = st.number_input("Sueldo mensual del ingeniero (USD):", min_value=0.0, value=1200.0, step=100.0)
    num_pcs = st.number_input("Número de PCs:", min_value=1, value=220, step=10)
    nivel_automatizacion = st.slider("Nivel de automatización (%):", min_value=0, max_value=100, value=70) / 100
    num_actualizaciones_anuales = st.slider("Número de actualizaciones anuales (1-12):", min_value=1, max_value=12, value=12)

    # Cálculos intermedios
    costo_hora_hombre = sueldo_mensual / 160
    horas_por_actualizacion = 1  # Asumimos 1 hora por actualización manual por PC
    horas_ahorradas_por_pc_anuales = horas_por_actualizacion * num_actualizaciones_anuales * nivel_automatizacion
    ahorro_anual = horas_ahorradas_por_pc_anuales * num_pcs * costo_hora_hombre
    ahorro_mensual = ahorro_anual / 12
    beneficio_neto_anual = ahorro_anual
    payback_period = inversion_inicial / ahorro_mensual
    roi = (beneficio_neto_anual * años_cobertura / inversion_inicial) * 100

    # Mostrar resultados
    st.header("Resultados del Cálculo")
    st.write(f"**Costo por Hora-Hombre (USD):** {costo_hora_hombre:.2f}")
    st.write(f"**Esfuerzo Ahorrado por PC Anual (horas):** {horas_ahorradas_por_pc_anuales:.2f}")
    st.write(f"**Ahorro Mensual Total (USD):** {ahorro_mensual:.2f}")
    st.write(f"**Beneficio Neto Anual (USD):** {beneficio_neto_anual:.2f}")
    st.write(f"**Payback Period (meses):** {payback_period:.2f}")
    st.write(f"**ROI (%):** {roi:.2f}")

    # Generar gráficas
    st.header("Gráficas de Análisis")

    # Beneficio acumulado y Payback Period
    meses = range(1, 49)  # Hasta el mes 48
    beneficio_acumulado = [ahorro_mensual * mes for mes in meses]

    fig1, ax1 = plt.subplots(figsize=(7, 5))
    ax1.plot(meses, beneficio_acumulado, label="Beneficio Acumulado (USD)", linewidth=2)
    ax1.axhline(inversion_inicial, color='red', linestyle='--', label=f"Inversión Inicial (${inversion_inicial})")
    ax1.axvline(payback_period, color='green', linestyle='--', label=f"Payback Period ({payback_period:.1f} meses)")
    ax1.set_title("Beneficio Acumulado y Payback Period", fontsize=14)
    ax1.set_xlabel("Meses", fontsize=12)
    ax1.set_ylabel("Beneficio Acumulado (USD)", fontsize=12)
    ax1.grid(True, linestyle='--', alpha=0.6)
    ax1.legend(fontsize=10)
    st.pyplot(fig1)

    # Inversión vs ROI
    niveles_inversion = np.linspace(10000, 50000, 100)
    rois_inversion = [(beneficio_neto_anual * años_cobertura / inversion) * 100 for inversion in niveles_inversion]

    fig2, ax2 = plt.subplots(figsize=(7, 5))
    ax2.plot(niveles_inversion, rois_inversion, label="Inversión vs ROI", linewidth=2)
    ax2.axvline(inversion_inicial, color='green', linestyle='--', label=f"Inversión del Ejercicio (${inversion_inicial})")
    ax2.scatter([inversion_inicial], [roi], color='red', zorder=5, label=f"ROI del Ejercicio ({roi:.1f}%)")
    ax2.set_title("Inversión vs ROI", fontsize=14)
    ax2.set_xlabel("Nivel de Inversión (USD)", fontsize=12)
    ax2.set_ylabel("ROI (%)", fontsize=12)
    ax2.grid(True, linestyle='--', alpha=0.6)
    ax2.legend(fontsize=10)
    st.pyplot(fig2)

# Interfaz de reinicio
if "recalcular" not in st.session_state:
    st.session_state.recalcular = True

if st.session_state.recalcular:
    calcular_roi_payback()
    st.session_state.recalcular = st.button("¿Otro cálculo nuevo?")
else:
    st.write("Gracias por usar la calculadora. Refresca la página para reiniciar.")
