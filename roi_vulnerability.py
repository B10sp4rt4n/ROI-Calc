import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

# Title and Description
st.title("Calculadora de ROI y Payback Period")
st.write("Esta calculadora te ayuda a analizar el ROI y el periodo de recuperación de tu inversión (Payback Period), además de evaluar el esfuerzo ahorrado y otras métricas clave.")

# Inputs Section
st.header("Datos de Entrada")

inversion_inicial = st.number_input("Inversión inicial ($):", min_value=0.0, step=100.0)
salario_mensual = st.number_input("Salario mensual del ingeniero ($):", min_value=0.0, step=100.0)
costo_hora_hombre = salario_mensual / 160 if salario_mensual > 0 else 0.0

# Effort Inputs
tiempo_actualizacion_pc = st.number_input("Tiempo de actualización por PC (en horas):", min_value=0.0, step=0.1)
cantidad_pcs = st.number_input("Cantidad de PCs a actualizar:", min_value=1, step=1)
frecuencia_actualizaciones = st.selectbox("Frecuencia de actualizaciones anuales:", options=[1, 2, 3, 6, 12], index=0)
porcentaje_automatizacion_esperado = st.slider("Porcentaje de automatización esperado (%):", min_value=0, max_value=100, step=1)
periodo_licencia = st.selectbox("Período de la licencia (en meses):", options=[12, 24, 36], index=0)

# Calculations
st.header("Resultados")

# Esfuerzo Actual y Ahorrado
esfuerzo_actual_anual = tiempo_actualizacion_pc * cantidad_pcs * costo_hora_hombre * frecuencia_actualizaciones
esfuerzo_ahorrado = esfuerzo_actual_anual * (porcentaje_automatizacion_esperado / 100)
porcentaje_automatizacion = (esfuerzo_ahorrado / esfuerzo_actual_anual * 100) if esfuerzo_actual_anual > 0 else 0.0
flujo_efectivo_mensual = esfuerzo_ahorrado / 12 if esfuerzo_ahorrado > 0 else 0.0

# ROI
beneficio_neto = esfuerzo_ahorrado - inversion_inicial
roi = (beneficio_neto / inversion_inicial * 100) if inversion_inicial > 0 else 0.0

# Payback Period
payback_period_meses = inversion_inicial / flujo_efectivo_mensual if flujo_efectivo_mensual > 0 else float('inf')

# Adjust ROI and Payback Period for License Period
if payback_period_meses <= periodo_licencia:
    roi = max(roi, 0)  # Ensure ROI is positive if investment is recovered within the license period
else:
    st.warning("El Payback Period excede el período de la licencia. Considere ajustar los parámetros para maximizar la rentabilidad.")

# Display Metrics
col1, col2, col3, col4, col5 = st.columns(5)
col1.metric("ROI (%)", f"{roi:.2f}%,", "Excelente" if roi >= 50 else ("Bueno" if roi >= 20 else "Mejorable"))
col2.metric("Payback Period (meses)", f"{payback_period_meses:.2f}")
col3.metric("Costo Hora-Hombre ($)", f"{costo_hora_hombre:.2f}")
col4.metric("Ahorro Mensual ($)", f"{flujo_efectivo_mensual:.2f}")
col5.metric("% Automatización", f"{porcentaje_automatizacion:.2f}%")

# Monthly Savings
st.subheader("Ahorro Mensual Derivado del Menor Esfuerzo")
st.write(f"El ahorro mensual, derivado del menor esfuerzo, es de: ${flujo_efectivo_mensual:.2f}")

# Graphs
st.header("Gráficos")

# Side-by-Side Graphs
col1, col2, col3 = st.columns(3)

# Payback Period Timeline
with col1:
    st.subheader("Línea de Tiempo del Payback Period")
    meses = np.arange(1, 49)  # 4 años en meses
    flujos_acumulados = [flujo_efectivo_mensual * mes for mes in meses]
    flujos_acumulados = np.array(flujos_acumulados) - inversion_inicial
    plt.figure(figsize=(5, 4))
    plt.plot(meses, flujos_acumulados, marker='o', label="Flujo Acumulado")
    plt.axhline(0, color='red', linestyle='--', label="Punto de Equilibrio")
    plt.title("Payback Period")
    plt.xlabel("Meses")
    plt.ylabel("Flujo Acumulado ($)")
    plt.legend()
    st.pyplot(plt)

# Effort Comparison
with col2:
    st.subheader("Comparativa de Esfuerzos")
    plt.figure(figsize=(5, 4))
    labels = ['Esfuerzo Actual Anual', 'Esfuerzo Ahorrado']
    values = [esfuerzo_actual_anual, esfuerzo_ahorrado]
    plt.bar(labels, values, color=['blue', 'green'])
    plt.title("Esfuerzo Actual vs. Esfuerzo Ahorrado")
    plt.ylabel("Costo Total ($)")
    st.pyplot(plt)

# ROI vs Payback Period
with col3:
    st.subheader("Relación ROI vs Payback Period")
    payback_range = np.arange(1, 49)  # Simulación de paybacks en meses
    roi_simulado = [((flujo_efectivo_mensual * p) - inversion_inicial) / inversion_inicial * 100 for p in payback_range]
    plt.figure(figsize=(5, 4))
    plt.plot(payback_range, roi_simulado, label="ROI Simulado", color='purple')
    plt.axvline(payback_period_meses, color='red', linestyle='--', label="Payback Actual")
    plt.title("ROI vs. Payback Period")
    plt.xlabel("Payback Period (meses)")
    plt.ylabel("ROI (%)")
    plt.legend()
    st.pyplot(plt)
