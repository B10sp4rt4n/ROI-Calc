
import streamlit as st
import numpy as np
import pandas as pd
import altair as alt
import base64

st.set_page_config(page_title="ROI y Payback - SynAppsSys", layout="centered")

# --- Men√∫ lateral ---
menu = st.sidebar.radio("Navegaci√≥n", ["üîß Configuraci√≥n", "üìä Resultados"])

# --- Cargar logos ---
st.sidebar.markdown("### Logos")
logo_cliente = st.sidebar.file_uploader("Logo del cliente", type=["png", "jpg", "jpeg", "webp"])
logo_partner = st.sidebar.file_uploader("Logo del partner (opcional)", type=["png", "jpg", "jpeg", "webp"])
nombre_cliente = st.sidebar.text_input("Nombre del cliente o empresa", value="Cliente Demo")


if "config" not in st.session_state:
    st.session_state.config = {}

if menu == "üîß Configuraci√≥n":
    st.title("üîß Configuraci√≥n del Escenario ROI")

    inversion_inicial = st.number_input("Nivel de Inversi√≥n Inicial (USD):", min_value=1000, value=23000, step=1000)
    a√±os_cobertura = st.number_input("A√±os de Cobertura de Licenciamiento:", min_value=1, value=2, step=1)
    sueldo_mensual = st.number_input("Sueldo Mensual del Ingeniero (USD):", min_value=500, value=1200, step=100)
    num_pcs = st.number_input("N√∫mero de PCs:", min_value=1, value=220, step=10)
    nivel_automatizacion = st.slider("Nivel de Automatizaci√≥n (%):", min_value=0, max_value=100, value=70, step=5) / 100
    num_actualizaciones_anuales = st.slider("N√∫mero de Actualizaciones Anuales:", min_value=1, max_value=12, value=12, step=1)
    horas_por_actualizacion = st.number_input("Horas Promedio por Actualizaci√≥n por PC:", min_value=0.1, value=1.0, step=0.1)

    if st.button("Guardar configuraci√≥n"):
        if nivel_automatizacion == 0 or horas_por_actualizacion == 0:
            st.error("‚ö†Ô∏è El nivel de automatizaci√≥n y las horas por actualizaci√≥n no pueden ser cero.")
        else:
            st.session_state.config = {
                "inversion_inicial": inversion_inicial,
                "a√±os_cobertura": a√±os_cobertura,
                "sueldo_mensual": sueldo_mensual,
                "num_pcs": num_pcs,
                "nivel_automatizacion": nivel_automatizacion,
                "num_actualizaciones_anuales": num_actualizaciones_anuales,
                "horas_por_actualizacion": horas_por_actualizacion,
            }
            st.success("‚úÖ Configuraci√≥n guardada. Puedes pasar a la pesta√±a de Resultados.")

elif menu == "üìä Resultados":
    st.title("üìä Resultados del ROI y Payback Period")

    if not st.session_state.config:
        st.warning("Primero debes guardar una configuraci√≥n en la secci√≥n anterior.")
    else:
        cfg = st.session_state.config

        costo_hora_hombre = cfg["sueldo_mensual"] / 160
        horas_ahorradas_pc_anuales = cfg["horas_por_actualizacion"] * cfg["num_actualizaciones_anuales"] * cfg["nivel_automatizacion"]
        ahorro_anual = horas_ahorradas_pc_anuales * cfg["num_pcs"] * costo_hora_hombre
        ahorro_mensual = ahorro_anual / 12
        beneficio_neto_anual = ahorro_anual
        payback_period = cfg["inversion_inicial"] / ahorro_mensual if ahorro_mensual > 0 else float("inf")
        roi = (beneficio_neto_anual * cfg["a√±os_cobertura"] / cfg["inversion_inicial"]) * 100 if cfg["inversion_inicial"] > 0 else 0

        cols = st.columns([1, 4, 1])
        with cols[1]:
            st.subheader(f"Resultados para: {nombre_cliente}")
        if logo_cliente:
            st.image(logo_cliente, width=160)

        st.markdown("### üìù Resumen de Configuraci√≥n")
        st.write(pd.DataFrame({
            "Par√°metro": ["Inversi√≥n Inicial", "A√±os de Licencia", "Sueldo Mensual", "No. PCs", "Automatizaci√≥n (%)", "Actualizaciones/A√±o", "Horas/Actualizaci√≥n"],
            "Valor": [
                f"${cfg['inversion_inicial']}", cfg["a√±os_cobertura"], f"${cfg['sueldo_mensual']}",
                cfg["num_pcs"], f"{int(cfg['nivel_automatizacion']*100)}%",
                cfg["num_actualizaciones_anuales"], cfg["horas_por_actualizacion"]
            ]
        }))

        st.markdown("### üìå M√©tricas Clave")
        st.metric("Ahorro Mensual Total", f"${ahorro_mensual:.2f}")
        st.metric("Payback Period", f"{payback_period:.1f} meses" if ahorro_mensual > 0 else "No aplica")
        st.metric("ROI", f"{roi:.2f}%")

        meses = list(range(1, 49))
        beneficio_acumulado = [ahorro_mensual * m for m in meses]
        df_beneficio = pd.DataFrame({"Mes": meses, "Beneficio Acumulado (USD)": beneficio_acumulado})

        grafico_beneficio = alt.Chart(df_beneficio).mark_line(point=True).encode(
            x="Mes",
            y="Beneficio Acumulado (USD)",
            tooltip=["Mes", "Beneficio Acumulado (USD)"]
        ).properties(title="Beneficio Acumulado y Payback Period")

        if ahorro_mensual > 0 and payback_period <= 48:
            grafico_beneficio += alt.Chart(pd.DataFrame({
                "Mes": [payback_period],
                "Beneficio Acumulado (USD)": [ahorro_mensual * payback_period]
            })).mark_rule(color="green").encode(x="Mes")

        grafico_beneficio += alt.Chart(pd.DataFrame({
            "Mes": [1],
            "Beneficio Acumulado (USD)": [cfg["inversion_inicial"]]
        })).mark_rule(color="red", strokeDash=[5, 5]).encode(y="Beneficio Acumulado (USD)")

        st.altair_chart(grafico_beneficio, use_container_width=True)

        min_inversion = min(5000, cfg["inversion_inicial"] * 0.8)
        niveles_inversion = np.linspace(min_inversion, 50000, 100)
        rois_inversion = [(beneficio_neto_anual * cfg["a√±os_cobertura"] / inv) * 100 for inv in niveles_inversion]
        df_roi = pd.DataFrame({"Nivel de Inversi√≥n (USD)": niveles_inversion, "ROI (%)": rois_inversion})

        grafico_roi = alt.Chart(df_roi).mark_line().encode(
            x="Nivel de Inversi√≥n (USD)",
            y="ROI (%)",
            tooltip=["Nivel de Inversi√≥n (USD)", "ROI (%)"]
        ).properties(title="Inversi√≥n vs ROI")

        punto_actual = alt.Chart(pd.DataFrame({
            "Nivel de Inversi√≥n (USD)": [cfg["inversion_inicial"]],
            "ROI (%)": [roi]
        })).mark_point(color='red', size=100).encode(x="Nivel de Inversi√≥n (USD)", y="ROI (%)")

        st.altair_chart(grafico_roi + punto_actual, use_container_width=True)

        st.markdown("### ")

        st.markdown("---")

       
        if logo_partner:
            st.markdown(
             "<div style='text-align: center;'>"
             "<img src='data:image/png;base64," + 
             base64.b64encode(logo_partner.read()).decode() + 
             "' width='180'></div>",
            unsafe_allow_html=True
    )
        else:
            st.warning("No se carg√≥ el logo del partner.")


