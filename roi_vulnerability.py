import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

def calculate_payback_and_roi(investment, lic_years, salary, num_pcs, update_freq, hours_per_update, automation_level):
    # Tarifa por hora del ingeniero
    hourly_rate = salary / 160

    # Esfuerzo actual
    updates_per_year = 12 / update_freq
    effort_current = num_pcs * updates_per_year * hours_per_update

    # Esfuerzo con automatizaciÃ³n
    effort_with_automation = effort_current * (1 - automation_level / 100)

    # Costos actuales y ahorros
    annual_cost_current = effort_current * hourly_rate
    annual_cost_with_automation = effort_with_automation * hourly_rate
    annual_savings = annual_cost_current - annual_cost_with_automation

    # Payback y ROI
    payback_months = investment / (annual_savings / 12) if annual_savings > 0 else float('inf')
    net_gain = annual_savings * lic_years - investment
    roi = (net_gain / investment) * 100 if investment > 0 else float('inf')

    return payback_months, roi, effort_current, effort_with_automation, annual_savings

# Streamlit UI
st.title("Payback and ROI Calculator")

# Input Parameters
investment = st.number_input("Initial Investment ($):", min_value=0.0, value=10000.0)
lic_years = st.number_input("Licensing Period (years):", min_value=1, value=3)
salary = st.number_input("Monthly Engineer Salary ($):", min_value=0.0, value=3000.0)
num_pcs = st.number_input("Number of PCs:", min_value=1, value=50)
update_freq = st.slider("Update Frequency (months):", min_value=1, max_value=12, value=3)
hours_per_update = st.number_input("Hours per Update per PC (decimal):", min_value=0.1, value=2.0, step=0.1)
automation_level = st.slider("Automation Level (%):", min_value=0, max_value=100, value=50)

# Calculations
payback, roi, effort_current, effort_with_automation, annual_savings = calculate_payback_and_roi(
    investment, lic_years, salary, num_pcs, update_freq, hours_per_update, automation_level
)

# Display Results
st.subheader("Results")
st.write(f"**Payback Period:** {payback:.2f} months")
st.write(f"**Return on Investment (ROI):** {roi:.2f}%")
st.write(f"**Current Effort (hours/year):** {effort_current:.2f}")
st.write(f"**Effort with Automation (hours/year):** {effort_with_automation:.2f}")

# Generate data for ROI vs Payback Period
monthly_savings_range = np.linspace(500, 2000, 20)
payback_periods_range = investment / monthly_savings_range
roi_values_range = (monthly_savings_range * 36 - investment) / investment * 100

# Highlighted points
highlight_payback_period = payback
highlight_roi = roi

# Plot ROI vs Payback Period
fig_roi, ax_roi = plt.subplots(figsize=(10, 6))
ax_roi.plot(payback_periods_range, roi_values_range, marker="o", color="purple", label="ROI Simulation")
ax_roi.axvline(highlight_payback_period, color="blue", linestyle="--", label=f"Payback Period = {highlight_payback_period:.1f} months")
ax_roi.axhline(highlight_roi, color="green", linestyle="--", label=f"ROI = {highlight_roi:.1f}%")

# Adding details to the plot
ax_roi.set_title("ROI Simulation vs Payback Period", fontsize=14)
ax_roi.set_xlabel("Payback Period (Months)", fontsize=12)
ax_roi.set_ylabel("ROI (%)", fontsize=12)
ax_roi.grid(True)
ax_roi.legend()

# Display plot
st.pyplot(fig_roi)
