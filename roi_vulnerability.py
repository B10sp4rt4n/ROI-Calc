import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Title and Description
st.title("Calculadora de ROI y Payback Period")
st.write("Esta calculadora te ayuda a analizar el ROI y el periodo de recuperación de tu inversión (Payback Period), además de evaluar el esfuerzo ahorrado y otras métricas clave.")

# Inputs Section
st.header("Datos de Entrada")

inversion_inicial = st.number_input("Inversión inicial ($):", min_value=0.0, step=100.0)
salario_mensual = st.number_input("Salario mensual del ingeniero ($):", min_value=0.0, step=100.0)
costo_hora_hombre = salario_mensual / 160 if salario_mensual > 0 else 0.0

# Effort Inputs
tiempo_actualizacion_pc = st.number_input("Tiempo de actualización por PC (en horas):", min_value=0.0, step=0.1)
cantidad_pcs = st.number_input("Cantidad de PCs a actualizar:", min_value=1, step=1)
frecuencia_actualizaciones = st.selectbox("Frecuencia de actualizaciones anuales:", options=[1, 2, 3, 6, 12], index=0)
porcentaje_automatizacion_esperado = st.slider("Porcentaje de automatización esperado (%):", min_value=0, max_value=100, step=1)
periodo_licencia = st.selectbox("Período de la licencia (en meses):", options=[12, 24, 36], index=0)

# Calculations
st.header("Resultados")

# Esfuerzo Actual y Ahorrado
esfuerzo_actual_anual = tiempo_actualizacion_pc * cantidad_pcs * costo_hora_hombre * frecuencia_actualizaciones
esfuerzo_ahorrado_total = esfuerzo_actual_anual * (porcentaje_automatizacion_esperado / 100)
porcentaje_automatizacion = (esfuerzo_ahorrado_total / esfuerzo_actual_anual * 100) if esfuerzo_actual_anual > 0 else 0.0
flujo_efectivo_mensual = esfuerzo_ahorrado_total / 12 if esfuerzo_ahorrado_total > 0 else 0.0

# Tiempo promedio por máquina
if cantidad_pcs > 0:
    tiempo_promedio_por_pc = tiempo_actualizacion_pc / cantidad_pcs
else:
    tiempo_promedio_por_pc = 0

# ROI basado en el período de la licencia
ahorros_totales_licencia = flujo_efectivo_mensual * periodo_licencia
beneficio_neto_licencia = ahorros_totales_licencia - inversion_inicial
roi_licencia = (beneficio_neto_licencia / inversion_inicial * 100) if inversion_inicial > 0 else 0.0

# Payback Period
payback_period_meses = inversion_inicial / flujo_efectivo_mensual if flujo_efectivo_mensual > 0 else float('inf')

# Adjust ROI and Payback Period for License Period
if payback_period_meses <= periodo_licencia:
    # Ensure ROI is positive if investment is recovered within the license period
    roi_licencia = max(roi_licencia, 0)
else:
    st.warning("El Payback Period excede el período de la licencia. Considere ajustar los parámetros para maximizar la rentabilidad.")

# Display Metrics
col1, col2, col3, col4, col5, col6 = st.columns(6)
col1.metric("ROI Licencia (%)", f"{roi_licencia:.2f}%,", "Excelente" if roi_licencia >= 50 else ("Bueno" if roi_licencia >= 20 else "Mejorable"))
col2.metric("Payback Period (meses)", f"{payback_period_meses:.2f}")
col3.metric("Costo Hora-Hombre ($)", f"{costo_hora_hombre:.2f}")
col4.metric("Ahorro Mensual ($)", f"{flujo_efectivo_mensual:.2f}")
col5.metric("% Automatización", f"{porcentaje_automatizacion:.2f}%")
col6.metric("Tiempo Promedio por PC (horas)", f"{tiempo_promedio_por_pc:.2f}")

# Monthly Savings
st.subheader("Ahorro Mensual Derivado del Menor Esfuerzo")
st.write(f"El ahorro mensual, derivado del menor esfuerzo, es de: ${flujo_efectivo_mensual:.2f}")

# Graph: ROI vs Time (Faster Payback -> Higher ROI)
st.subheader("Gráfico: A menor tiempo de Payback, mayor ROI")
meses = np.linspace(1, periodo_licencia, 100)
roi_vs_payback = [(flujo_efectivo_mensual * t - inversion_inicial) / inversion_inicial * 100 if inversion_inicial > 0 else 0 for t in meses]

plt.figure(figsize=(8, 5))
plt.plot(meses, roi_vs_payback, label="ROI en función del tiempo", color="purple")
plt.axvline(payback_period_meses, color="red", linestyle="--", label="Payback Period")
plt.title("Relación entre Payback Period y ROI")
plt.xlabel("Tiempo (meses)")
plt.ylabel("% ROI")
plt.gca().invert_xaxis()  # Decreasing payback period shows increasing ROI
plt.legend()
st.pyplot(plt)
